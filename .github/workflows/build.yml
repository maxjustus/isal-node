name: Build and Publish

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: aarch64-apple-darwin
            build: npm run build
            
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: |
              sudo apt-get update
              sudo apt-get install nasm -y
              npm run build
            
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build: |
              sudo apt-get update
              sudo apt-get install gcc-aarch64-linux-gnu nasm -y
              npm run build
            
          # Add more platforms as needed
          # - host: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   build: npm run build

    name: Build ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.settings.target }}
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build for ${{ matrix.settings.target }}
        run: ${{ matrix.settings.build }}
        env:
          CARGO_BUILD_TARGET: ${{ matrix.settings.target }}
          RUSTFLAGS: '-C target-feature=+crt-static'
      
      - name: Test
        if: matrix.settings.target == 'x86_64-unknown-linux-gnu' || matrix.settings.target == 'aarch64-apple-darwin'
        run: npm run test:all
      
      - name: Rename binary
        run: |
          mv index.node isal-node-${{ matrix.settings.target }}.node
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: isal-node-${{ matrix.settings.target }}
          path: isal-node-${{ matrix.settings.target }}.node
          retention-days: 1

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Prepare binaries
        run: |
          mkdir -p prebuilds
          find artifacts -name "*.node" -exec cp {} prebuilds/ \;
          ls -la prebuilds/
      
      - name: Create packages for each platform
        run: |
          # We'll create separate packages for each platform
          for binary in prebuilds/*.node; do
            platform=$(basename "$binary" .node)
            mkdir -p "packages/$platform"
            cp "$binary" "packages/$platform/index.node"
            
            # Create platform-specific package.json
            cat > "packages/$platform/package.json" << EOF
          {
            "name": "@isal-node/$platform",
            "version": "$(node -p "require('./package.json').version")",
            "description": "Pre-built binary for $platform",
            "main": "index.node",
            "files": ["index.node"],
            "license": "MIT",
            "repository": {
              "type": "git",
              "url": "$(node -p "require('./package.json').repository.url")"
            }
          }
          EOF
          done
      
      - name: Publish platform packages
        run: |
          for package_dir in packages/*; do
            if [ -d "$package_dir" ]; then
              echo "Publishing $(basename "$package_dir")"
              cd "$package_dir"
              npm publish --access public || true
              cd ../..
            fi
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Update main package
        run: |
          # Update main package.json with optionalDependencies
          node -e "
            const pkg = require('./package.json');
            pkg.optionalDependencies = pkg.optionalDependencies || {};
            pkg.optionalDependencies['@isal-node/x86_64-unknown-linux-gnu'] = pkg.version;
            pkg.optionalDependencies['@isal-node/aarch64-unknown-linux-gnu'] = pkg.version;
            pkg.optionalDependencies['@isal-node/aarch64-apple-darwin'] = pkg.version;
            require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));
          "
      
      - name: Publish main package
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}